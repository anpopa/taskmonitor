/*-
 * SPDX-License-Identifier: MIT
 *-
 * @date      2021-2022
 * @author    Alin Popa <alin.popa@fxdata.ro>
 * @copyright MIT
 * @brief     Defaults class
 * @details   Declare defaults values for application
 *-
 */

#pragma once

#include <map>
#include <string>

namespace tkm::monitor
{

class Defaults
{
public:
  enum class Default {
    Version,
    ConfPath,
    RuntimeDirectory,
    RxBufferSize,
    TxBufferSize,
    MsgBufferSize,
    EnableTCPServer,
    EnableUDSServer,
    StatPollInterval,
    ProcPollInterval,
    MemPollInterval,
    ReadProcAtInit,
    PressurePollInterval,
    TCPServerAddress,
    TCPServerPort,
    TCPServerStartIfPath,
    TCPServerStartOnSignal,
    UDSServerSocketPath,
    UDSServerStartIfPath,
    UDSServerStartOnSignal,
  };

  Defaults()
  {
    m_table.insert(std::pair<Default, std::string>(Default::Version, "@GIT_SHA1@"));
    m_table.insert(std::pair<Default, std::string>(Default::ConfPath, "@TKM_CONFIG_FILE@"));
    m_table.insert(std::pair<Default, std::string>(Default::RuntimeDirectory, "/run/taskmonitor"));
    m_table.insert(std::pair<Default, std::string>(Default::RxBufferSize, "1048576"));
    m_table.insert(std::pair<Default, std::string>(Default::TxBufferSize, "1048576"));
    m_table.insert(std::pair<Default, std::string>(Default::MsgBufferSize, "1048576"));
    m_table.insert(std::pair<Default, std::string>(Default::StatPollInterval, "1000000"));
    m_table.insert(std::pair<Default, std::string>(Default::MemPollInterval, "3000000"));
    m_table.insert(std::pair<Default, std::string>(Default::ProcPollInterval, "5000000"));
    m_table.insert(std::pair<Default, std::string>(Default::PressurePollInterval, "5000000"));
    m_table.insert(std::pair<Default, std::string>(Default::ReadProcAtInit, "true"));
    m_table.insert(std::pair<Default, std::string>(Default::EnableTCPServer, "true"));
    m_table.insert(std::pair<Default, std::string>(Default::EnableUDSServer, "false"));
    m_table.insert(std::pair<Default, std::string>(Default::TCPServerAddress, "localhost"));
    m_table.insert(std::pair<Default, std::string>(Default::TCPServerPort, "3357"));
    m_table.insert(std::pair<Default, std::string>(Default::TCPServerStartIfPath, "none"));
    m_table.insert(std::pair<Default, std::string>(Default::UDSServerSocketPath,
                                                   "/run/taskmonitor/taskmonitor.sock"));
    m_table.insert(std::pair<Default, std::string>(Default::UDSServerStartIfPath, "none"));
  }

  auto getFor(Default key) -> std::string & { return m_table.at(key); }

private:
  std::map<Default, std::string> m_table;
};

static Defaults tkmDefaults{};

} // namespace tkm::monitor
