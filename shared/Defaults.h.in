/*
 * SPDX license identifier: GPL-2.0-or-later
 *
 * Copyright (C) 2021 Alin Popa
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * \author Alin Popa <alin.popa@fxdata.ro>
 */

#pragma once

#include <map>
#include <string>

namespace tkm::monitor
{

class Defaults
{
public:
    enum class Default {
        Version,
        ConfPath,
        StatPollInterval,
        ProcPollInterval,
        RxBufferSize,
        TxBufferSize,
        MsgBufferSize,
        ReadProcAtInit,
        EnableSysStat,
        WithCPU, 
        WithMemory, 
        WithContext,
        WithIO,
        WithSwap,
        WithReclaim,
        WithTrashing
    };

    Defaults()
    {
        m_table.insert(std::pair<Default, std::string>(Default::Version, "@GIT_SHA1@"));
        m_table.insert(std::pair<Default, std::string>(Default::ConfPath, "@TKM_CONFIG_FILE@"));
        m_table.insert(std::pair<Default, std::string>(Default::StatPollInterval, "1000000"));
        m_table.insert(std::pair<Default, std::string>(Default::ProcPollInterval, "3000000"));
        m_table.insert(std::pair<Default, std::string>(Default::RxBufferSize, "1048576"));
        m_table.insert(std::pair<Default, std::string>(Default::TxBufferSize, "1048576"));
        m_table.insert(std::pair<Default, std::string>(Default::MsgBufferSize, "1048576"));
        m_table.insert(std::pair<Default, std::string>(Default::ReadProcAtInit, "true"));
        m_table.insert(std::pair<Default, std::string>(Default::EnableSysStat, "true"));
        m_table.insert(std::pair<Default, std::string>(Default::WithCPU, "true"));
        m_table.insert(std::pair<Default, std::string>(Default::WithMemory, "true"));
        m_table.insert(std::pair<Default, std::string>(Default::WithContext, "true"));
        m_table.insert(std::pair<Default, std::string>(Default::WithIO, "true"));
        m_table.insert(std::pair<Default, std::string>(Default::WithSwap, "false"));
        m_table.insert(std::pair<Default, std::string>(Default::WithReclaim, "false"));
        m_table.insert(std::pair<Default, std::string>(Default::WithTrashing, "false"));
    }

    auto getFor(Default key) -> std::string & { return m_table.at(key); }

private:
    std::map<Default, std::string> m_table;
};

static Defaults tkmDefaults {};

} // namespace tkm::monitor
