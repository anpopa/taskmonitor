/*-
 * SPDX-License-Identifier: MIT
 *-
 * @date      2021-2022
 * @author    Alin Popa <alin.popa@fxdata.ro>
 * @copyright MIT
 * @brief     Defaults class
 * @details   Declare defaults values for application
 *-
 */

#pragma once

#include <map>
#include <string>

namespace tkm::monitor
{

class Defaults
{
public:
  enum class Default {
    Version,
    ConfPath,
    ContainersPath,
    RuntimeDirectory,
    RxBufferSize,
    TxBufferSize,
    MsgBufferSize,
    EnableProcEvent,
    EnableProcAcct,
    EnableTCPServer,
    EnableUDSServer,
    EnableStartupData,
    UpdateOnProcEvent,
    StartupDataCleanupTime,
    ProdModeFastLaneInt,
    ProdModePaceLaneInt,
    ProdModeSlowLaneInt,
    ProfModeFastLaneInt,
    ProfModePaceLaneInt,
    ProfModeSlowLaneInt,
    ProfModeIfPath,
    SelfLowerPriority,
    ReadProcAtInit,
    TCPServerAddress,
    TCPServerPort,
    UDSServerSocketPath,
    CollectorInactiveTimeout,
  };

  enum class Val { True, False, None, ProcAcct, ProcInfo };
  enum class Arg { WithEventSource };

  Defaults()
  {
    m_table.insert(std::pair<Default, std::string>(Default::Version, "@PROJECT_VERSION@"));
    m_table.insert(std::pair<Default, std::string>(Default::ConfPath, "@TKM_CONFIG_FILE@"));
    m_table.insert(std::pair<Default, std::string>(Default::ContainersPath, "/var/lib/lxc"));
    m_table.insert(std::pair<Default, std::string>(Default::RuntimeDirectory, "/run/taskmonitor"));
    m_table.insert(std::pair<Default, std::string>(Default::RxBufferSize, "524288"));
    m_table.insert(std::pair<Default, std::string>(Default::TxBufferSize, "524288"));
    m_table.insert(std::pair<Default, std::string>(Default::MsgBufferSize, "1048576"));
    m_table.insert(std::pair<Default, std::string>(Default::ProdModeFastLaneInt, "10000000"));
    m_table.insert(std::pair<Default, std::string>(Default::ProdModePaceLaneInt, "30000000"));
    m_table.insert(std::pair<Default, std::string>(Default::ProdModeSlowLaneInt, "60000000"));
    m_table.insert(std::pair<Default, std::string>(Default::ProfModeFastLaneInt, "1000000"));
    m_table.insert(std::pair<Default, std::string>(Default::ProfModePaceLaneInt, "5000000"));
    m_table.insert(std::pair<Default, std::string>(Default::ProfModeSlowLaneInt, "10000000"));
    m_table.insert(std::pair<Default, std::string>(Default::ProfModeIfPath, "none"));
    m_table.insert(std::pair<Default, std::string>(Default::SelfLowerPriority, "true"));
    m_table.insert(std::pair<Default, std::string>(Default::ReadProcAtInit, "true"));
    m_table.insert(std::pair<Default, std::string>(Default::EnableProcEvent, "true"));
    m_table.insert(std::pair<Default, std::string>(Default::EnableProcAcct, "true"));
    m_table.insert(std::pair<Default, std::string>(Default::EnableTCPServer, "true"));
    m_table.insert(std::pair<Default, std::string>(Default::EnableUDSServer, "false"));
    m_table.insert(std::pair<Default, std::string>(Default::EnableStartupData, "false"));
    m_table.insert(std::pair<Default, std::string>(Default::UpdateOnProcEvent, "true"));
    m_table.insert(std::pair<Default, std::string>(Default::StartupDataCleanupTime, "60000000"));
    m_table.insert(std::pair<Default, std::string>(Default::TCPServerAddress, "localhost"));
    m_table.insert(std::pair<Default, std::string>(Default::TCPServerPort, "3357"));
    m_table.insert(std::pair<Default, std::string>(Default::UDSServerSocketPath,
                                                   "/run/taskmonitor/taskmonitor.sock"));
    m_table.insert(std::pair<Default, std::string>(Default::CollectorInactiveTimeout, "10000000"));

    m_vals.insert(std::pair<Val, std::string>(Val::True, "true"));
    m_vals.insert(std::pair<Val, std::string>(Val::False, "false"));
    m_vals.insert(std::pair<Val, std::string>(Val::None, "none"));
    m_vals.insert(std::pair<Val, std::string>(Val::ProcAcct, "ProcAcct"));
    m_vals.insert(std::pair<Val, std::string>(Val::ProcInfo, "ProcInfo"));

    m_args.insert(std::pair<Arg, std::string>(Arg::WithEventSource, "WithEventSource"));
  }

  auto getFor(Default key) -> std::string & { return m_table.at(key); }
  auto valFor(Val key) -> std::string & { return m_vals.at(key); }
  auto argFor(Arg key) -> std::string & { return m_args.at(key); }

private:
  std::map<Default, std::string> m_table;
  std::map<Val, std::string> m_vals;
  std::map<Arg, std::string> m_args;
};

static Defaults tkmDefaults{};

} // namespace tkm::monitor
